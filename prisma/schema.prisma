generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  name               String?
  email              String        @unique
  country            String
  company_id         String?
  role               Role          @default(BASIC)
  type               Type          @default(basic)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt @map("updated_at")
  AuthLinks          AuthLinks[]
  PendingUserInvites PendingUser[]
  Company            Company?      @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("users")
}

model Company {
  id              String  @id @default(uuid())
  company_name    String
  ein             String? @unique
  cnpj            String? @unique
  phone           String
  owner_id        String
  address_id      String  @unique
  stripeAccountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  user              User[]
  item              Item[]
  client            Client[]
  invoice           Invoice[]
  schedule          Schedule[]
  estimate          Estimate[]
  inviteLinks       InviteLinks[]
  supplierUser      SupplierUser[]
  pendingUsers      PendingUser[]
  unitTypeCustom    UnitTypeCustom[]
  estimateSupplier  EstimateSupplier[]
  paymentModeCustom PaymentModeCustom[]

  address Address @relation(fields: [address_id], references: [id], onDelete: Cascade)

  @@map("companies")
}

model PendingUser {
  id         String   @id @default(uuid())
  email      String   @unique
  company_id String
  invited_by String
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  invitedBy  User     @relation(fields: [invited_by], references: [id], onDelete: Cascade)

  @@map("pending_users")
}

model SupplierUser {
  supplier_id String
  company_id  String
  Company     Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  supplier    Supplier @relation(fields: [supplier_id], references: [id], onDelete: Cascade)

  @@id([supplier_id, company_id])
}

model Supplier {
  id            String   @id @default(uuid())
  ein           String?  @unique
  cnpj          String?  @unique
  phone         String
  company_name  String
  email_address String?  @default("")
  address_id    String   @unique // Garante que cada cliente tem um único endereço
  createdAt     DateTime @default(now())

  supplierUser     SupplierUser[]
  estimateSupplier EstimateSupplier[]

  address Address @relation(fields: [address_id], references: [id], onDelete: Cascade)

  @@map("sluppliers")
}

model Address {
  id      String @id @default(uuid())
  country String

  city        String
  state       String
  postal_code String

  street       String?
  number       String?
  neighborhood String?

  street_address String?
  unit_number    String?

  company  Company?
  client   Client?
  Supplier Supplier?

  @@map("addresses")
}

model Client {
  id            String  @id @default(uuid())
  name          String
  company_name  String?
  email_address String
  phone         String
  type          String
  cpf           String?
  cnpj          String?
  ssn           String?
  ein           String?

  company_id String
  address_id String   @unique
  createdAt  DateTime @default(now())

  invoice  Invoice[]
  estimate Estimate[]
  Schedule Schedule[]

  company Company @relation(fields: [company_id], references: [id], onDelete: Cascade)
  address Address @relation(fields: [address_id], references: [id], onDelete: Cascade)

  @@map("clients")
}

model PaymentMode {
  id   String @id @default(uuid())
  name String

  @@map("payments_mode")
}

model PaymentModeCustom {
  id         String   @id @default(uuid())
  name       String
  type       String
  code       String
  company_id String?  @map("company_id")
  company    Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("payments_mode_custom")
}

model UnitType {
  id   String @id @default(uuid())
  name String

  @@map("unit_types")
}

model UnitTypeCustom {
  id         String   @id @default(uuid())
  name       String
  company_id String?  @map("company_id")
  company    Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("unit_types_custom")
}

model Item {
  id          String   @id @default(uuid())
  name        String
  price       Decimal
  description String?
  unit        String
  company_id  String?  @map("company_id")
  company     Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("items")
}

model Estimate {
  id              String   @id @default(uuid())
  estimate_number String?
  status          String?
  notes           String?
  total           Decimal?
  sub_total       Decimal?
  client_id       String?  @map("client_id")
  company_id      String?  @map("company_id")
  createdAt       DateTime @default(now())

  Invoice       Invoice[]
  EstimateItems EstimateItems[]

  client  Client?  @relation(fields: [client_id], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("estimates")
}

model EstimateItems {
  id          String   @id @default(uuid())
  name        String
  price       Decimal
  quantity    Decimal
  unit        String
  description String?
  total       Decimal
  createdAt   DateTime @default(now())
  estimate_id String
  estimate    Estimate @relation(fields: [estimate_id], references: [id], onDelete: Cascade)

  @@map("estimate_items")
}

model Invoice {
  id              String   @id @default(uuid())
  invoice_number  String?
  status          String?
  notes           String?
  total           Decimal?
  payment_mode    String?
  createdAt       DateTime @default(now())
  company_id      String?  @map("company_id")
  client_id       String?  @map("client_id")
  estimate_id     String
  stripeInvoiceId String?
  paymentUrl      String?

  invoiceItems InvoiceItems[]

  client   Client?  @relation(fields: [client_id], references: [id], onDelete: Cascade)
  company  Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)
  estimate Estimate @relation(fields: [estimate_id], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model InvoiceItems {
  id         String   @id @default(uuid())
  name       String
  price      Decimal
  quantity   Decimal
  unit       String
  total      Decimal
  createdAt  DateTime @default(now())
  invoice_id String   @map("invoice_id")
  invoice    Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model EstimateSupplier {
  id                       String                  @id @default(uuid())
  status                   String?
  notes                    String?
  createdAt                DateTime                @default(now())
  supplier_id              String?
  company_id               String?                 @map("company_id")
  estimate_supplier_number String?
  EstimateSupplierItems    EstimateSupplierItems[]
  company                  Company?                @relation(fields: [company_id], references: [id], onDelete: Cascade)
  supplier                 Supplier?               @relation(fields: [supplier_id], references: [id], onDelete: Cascade)

  @@map("estimatesSupplier")
}

model EstimateSupplierItems {
  id                   String           @id @default(uuid())
  name                 String
  quantity             Decimal
  createdAt            DateTime         @default(now())
  estimate_supplier_id String           @map("estimate_supplier_id")
  estimateSupplier     EstimateSupplier @relation(fields: [estimate_supplier_id], references: [id], onDelete: Cascade)

  @@map("estimate_supplier_items")
}

model AuthLinks {
  id        String   @id @default(uuid())
  code      String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user_id   String
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("auth_links")
}

model Schedule {
  id            String   @id @default(uuid())
  date          DateTime
  deviceEventId String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  company_id    String
  client_id     String
  company       Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  client        Client   @relation(fields: [client_id], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model InviteLinks {
  id         String   @id @default(uuid())
  code       String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  company_id String
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("invite_links")
}

enum Role {
  BASIC
  MASTER
}

enum Type {
  basic
  pro
  team
}
