generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  name               String?
  email              String        @unique
  role               Role          @default(BASIC)
  type               Type          @default(basic)
  company_id         String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt @map("updated_at")
  AuthLinks          AuthLinks[]
  PendingUserInvites PendingUser[]
  Company            Company?      @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("users")
}

model Company {
  id                String              @id @default(uuid())
  cnpj              String              @unique
  phone             String
  state             String
  city              String
  cep               String
  address           String
  neighborhood      String
  address_number    String
  company_name      String
  owner_id          String
  createdAt         DateTime            @default(now())
  supplierUser      SupplierUser[]
  client            Client[]
  estimate          Estimate[]
  estimateSupplier  EstimateSupplier[]
  inviteLinks       InviteLinks[]
  invoice           Invoice[]
  item              Item[]
  paymentModeCustom PaymentModeCustom[]
  pendingUsers      PendingUser[]
  unitTypeCustom    UnitTypeCustom[]
  user              User[]
  schedule          Schedule[]

  @@map("companies")
}

model PendingUser {
  id         String   @id @default(uuid())
  email      String   @unique
  company_id String
  invited_by String
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  invitedBy  User     @relation(fields: [invited_by], references: [id], onDelete: Cascade)

  @@map("pending_users")
}

model SupplierUser {
  supplier_id String
  company_id  String
  Company     Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  supplier    Supplier @relation(fields: [supplier_id], references: [id], onDelete: Cascade)

  @@id([supplier_id, company_id])
}

model Supplier {
  id               String             @id @default(uuid())
  cnpj             String             @unique
  phone            String
  state            String
  city             String
  cep              String
  address          String
  neighborhood     String
  address_number   String
  company_name     String
  email_address    String             @default("")
  createdAt        DateTime           @default(now())
  supplierUser     SupplierUser[]
  estimateSupplier EstimateSupplier[]

  @@map("sluppliers")
}

model Client {
  id             String     @id @default(uuid())
  type           String
  cpf            String?
  cnpj           String?
  name           String
  company_name   String?
  email_address  String
  phone          String
  cep            String
  address        String
  address_number String
  neighborhood   String
  city           String
  state          String
  createdAt      DateTime   @default(now())
  company_id     String
  company        Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  estimate       Estimate[]
  invoice        Invoice[]
  Schedule       Schedule[]

  @@map("clients")
}

model PaymentMode {
  id   String @id @default(uuid())
  name String

  @@map("payments_mode")
}

model PaymentModeCustom {
  id         String   @id @default(uuid())
  name       String
  company_id String?  @map("company_id")
  company    Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("payments_mode_custom")
}

model UnitType {
  id   String @id @default(uuid())
  name String

  @@map("unit_types")
}

model UnitTypeCustom {
  id         String   @id @default(uuid())
  name       String
  company_id String?  @map("company_id")
  company    Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("unit_types_custom")
}

model Item {
  id          String   @id @default(uuid())
  name        String
  price       Decimal
  description String?
  unit        String
  company_id  String?  @map("company_id")
  company     Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("items")
}

model Estimate {
  id              String          @id @default(uuid())
  estimate_number String?
  status          String?
  notes           String?
  sub_total       Decimal?
  total           Decimal?
  createdAt       DateTime        @default(now())
  company_id      String?         @map("company_id")
  client_id       String?         @map("client_id")
  EstimateItems   EstimateItems[]
  client          Client?         @relation(fields: [client_id], references: [id], onDelete: Cascade)
  company         Company?        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Invoice         Invoice[]

  @@map("estimates")
}

model EstimateItems {
  id          String   @id @default(uuid())
  name        String
  price       Decimal
  quantity    Decimal
  unit        String
  total       Decimal
  createdAt   DateTime @default(now())
  estimate_id String
  estimate    Estimate @relation(fields: [estimate_id], references: [id], onDelete: Cascade)

  @@map("estimate_items")
}

model Invoice {
  id             String         @id @default(uuid())
  invoice_number String?
  status         String?
  notes          String?
  total          Decimal?
  payment_mode   String?
  createdAt      DateTime       @default(now())
  company_id     String?        @map("company_id")
  client_id      String?        @map("client_id")
  estimate_id    String
  invoiceItems   InvoiceItems[]
  client         Client?        @relation(fields: [client_id], references: [id], onDelete: Cascade)
  company        Company?       @relation(fields: [company_id], references: [id], onDelete: Cascade)
  estimate       Estimate       @relation(fields: [estimate_id], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model InvoiceItems {
  id         String   @id @default(uuid())
  name       String
  price      Decimal
  quantity   Decimal
  unit       String
  total      Decimal
  createdAt  DateTime @default(now())
  invoice_id String   @map("invoice_id")
  invoice    Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model EstimateSupplier {
  id                       String                  @id @default(uuid())
  status                   String?
  notes                    String?
  createdAt                DateTime                @default(now())
  supplier_id              String?
  company_id               String?                 @map("company_id")
  estimate_supplier_number String?
  EstimateSupplierItems    EstimateSupplierItems[]
  company                  Company?                @relation(fields: [company_id], references: [id], onDelete: Cascade)
  supplier                 Supplier?               @relation(fields: [supplier_id], references: [id], onDelete: Cascade)

  @@map("estimatesSupplier")
}

model EstimateSupplierItems {
  id                   String           @id @default(uuid())
  name                 String
  quantity             Decimal
  createdAt            DateTime         @default(now())
  estimate_supplier_id String           @map("estimate_supplier_id")
  estimateSupplier     EstimateSupplier @relation(fields: [estimate_supplier_id], references: [id], onDelete: Cascade)

  @@map("estimate_supplier_items")
}

model AuthLinks {
  id        String   @id @default(uuid())
  code      String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user_id   String
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("auth_links")
}

model Schedule {
  id            String   @id @default(uuid())
  date          DateTime
  deviceEventId String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  company_id String
  client_id  String

  company Company @relation(fields: [company_id], references: [id], onDelete: Cascade)
  client  Client  @relation(fields: [client_id], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model InviteLinks {
  id         String   @id @default(uuid())
  code       String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  company_id String
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("invite_links")
}

enum Role {
  BASIC
  MASTER
}

enum Type {
  basic
  pro
  team
}
